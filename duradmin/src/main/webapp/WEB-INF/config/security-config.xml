<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/security"
  xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">

  <beans:bean id="springSecurityFilterChain" class="org.springframework.security.util.FilterChainProxy">
    <filter-chain-map path-type="ant">
      <!--REST endpoints-->
      <filter-chain pattern="/init"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/security"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>

      <!--Admin/Root endpoints-->
      <filter-chain pattern="/dashboard"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/admin"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/services**"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>

      <!--Open endpoints-->
      <filter-chain pattern="/login*"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/style/**"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/images/**"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/js/**"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/jquery/**"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/favicon.ico"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
      <filter-chain pattern="/webstart/**"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>

      <!--Catch-all-->
      <filter-chain pattern="/**"
                    filters="httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
    </filter-chain-map>
  </beans:bean>


  <!--Security Filter definitions-->
  <beans:bean id="httpSessionContextIntegrationFilter"
              class="org.springframework.security.context.HttpSessionContextIntegrationFilter"/>

  <!--Filter: logout-->
  <beans:bean id="logoutFilter"
              class="org.springframework.security.ui.logout.LogoutFilter">
    <beans:constructor-arg index="0" value="/"/>
    <beans:constructor-arg index="1">
      <beans:list>
        <beans:ref bean="securityContextLogoutHandler"/>
        <!--todo: for shib-->
        <!--<beans:ref bean="shibLogoutHandler"/>-->
      </beans:list>
    </beans:constructor-arg>
    <beans:property name="filterProcessesUrl" value="/logout"/>
  </beans:bean>

  <beans:bean id="securityContextLogoutHandler" class="org.springframework.security.ui.logout.SecurityContextLogoutHandler">
    <beans:property name="invalidateHttpSession" value="true"/>
  </beans:bean>

  <!--todo: for shib-->
  <!--<beans:bean id="shibLogoutHandler" class="org.duracloud.duradmin.security.ShibLogoutHandler"/>-->

  <!--todo: remove later-->
  <beans:bean id="authenticationProcessingFilter"
              class="org.springframework.security.ui.webapp.AuthenticationProcessingFilter">
    <beans:property name="authenticationManager" ref="authenticationManager" />
    <beans:property name="authenticationFailureUrl" value=""/>
    <beans:property name="defaultTargetUrl" value="/" />
    <beans:property name="alwaysUseDefaultTargetUrl" value="false"/>
    <beans:property name="filterProcessesUrl" value="/j_spring_security_check" />
  </beans:bean>

  <!--todo: remove later-->
  <beans:bean id="authenticationProcessingFilterEntryPoint"
              class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
		<beans:property name="loginFormUrl" value="/login" />
		<beans:property name="serverSideRedirect" value="true" />
	</beans:bean>

  <!--Filter: basic-auth-->
  <beans:bean id="basicProcessingFilter"
              class="org.springframework.security.ui.basicauth.BasicProcessingFilter">
    <beans:property name="authenticationEntryPoint" ref="basicProcessingFilterEntryPoint"/>
    <beans:property name="authenticationManager" ref="authenticationManager"/>
  </beans:bean>

  <beans:bean id="basicProcessingFilterEntryPoint"
              class="org.springframework.security.ui.basicauth.BasicProcessingFilterEntryPoint">
    <beans:property name="realmName" value="duradmin"/>
  </beans:bean>

  <!--Filter: directs authN/Z exceptions-->
  <beans:bean id="exceptionTranslationFilter"
              class="org.springframework.security.ui.ExceptionTranslationFilter">
    <beans:property name="authenticationEntryPoint" ref="authenticationProcessingFilterEntryPoint"/>
    <beans:property name="accessDeniedHandler" ref="accessDeniedHandler"/>
  </beans:bean>

  <beans:bean id="accessDeniedHandler" class="org.springframework.security.ui.AccessDeniedHandlerImpl">
    <beans:property name="errorPage" value="/fix-me"/>
  </beans:bean>

  <!--Filter: apply security rules over resources-->
  <beans:bean id="filterSecurityInterceptor"
              class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
    <beans:property name="authenticationManager" ref="authenticationManager"/>
    <beans:property name="accessDecisionManager" ref="accessDecisionManager"/>
    <beans:property name="objectDefinitionSource">
      <filter-invocation-definition-source
        id="filterInvocationDefinitionSource">
        <intercept-url pattern="/init" method="GET" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/init" method="POST" access="ROLE_ROOT"/>
        <intercept-url pattern="/security" access="ROLE_ROOT"/>

        <intercept-url pattern="/dashboard" access="ROLE_ROOT"/>
        <intercept-url pattern="/admin" access="ROLE_ROOT"/>
        <intercept-url pattern="/services**" access="ROLE_ADMIN"/>

        <intercept-url pattern="/login*" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/style/**" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/images/**" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/js/**" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/jquery/**" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/favicon.ico" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/webstart/**" access="ROLE_ANONYMOUS"/>

        <intercept-url pattern="/**" access="ROLE_USER"/>
      </filter-invocation-definition-source>
    </beans:property>
  </beans:bean>






  <!--Security Filters for REST endpoints-->

  <!--Security Filters for Browser/Shib endpoints-->
  <!--todo: for shib-->
  <!--<http auto-config="false" entry-point-ref="http403ForbiddenEntryPoint">-->
    <!--<intercept-url pattern="/dashboard" access="ROLE_ROOT"/>-->
    <!--<intercept-url pattern="/admin" access="ROLE_ROOT"/>-->
    <!--<intercept-url pattern="/services**" access="ROLE_ADMIN"/>-->
    <!--<intercept-url pattern="/**" access="ROLE_USER"/>-->

    <!--&lt;!&ndash;<logout invalidate-session="true" logout-url="/logout" logout-success-url="/shiblogout"/>&ndash;&gt;-->
  <!--</http>-->

  <!--todo: for shib-->
  <!--<beans:bean id="http403ForbiddenEntryPoint"-->
                <!--class="org.springframework.security.ui.preauth.PreAuthenticatedProcessingFilterEntryPoint"/>-->

  <!--todo: for shib-->
  <!--<beans:bean id="requestHeaderAuthenticationFilter"-->
              <!--class="org.springframework.security.ui.preauth.header.RequestHeaderPreAuthenticatedProcessingFilter ">-->
    <!--<custom-filter position="PRE_AUTH_FILTER"/>-->
    <!--<beans:property name="principalRequestHeader" value="REMOTE_USER"/>-->
    <!--<beans:property name="authenticationManager" ref="authenticationManager"/>-->
  <!--</beans:bean>-->



  <!-- AuthN Manager -->
  <authentication-manager alias="authenticationManager"/>
  <authentication-provider user-service-ref="userDetailsSvc">
    <password-encoder ref="passwordEncoder"/>
  </authentication-provider>
  <authentication-provider user-service-ref="userDetailsSvc"/>

  <beans:bean id="accessDecisionManager"
              class="org.springframework.security.vote.AffirmativeBased">
    <beans:property name="decisionVoters">
      <beans:list>
        <beans:bean class="org.springframework.security.vote.RoleVoter"/>
        <beans:bean
          class="org.springframework.security.vote.AuthenticatedVoter"/>
      </beans:list>
    </beans:property>
  </beans:bean>


  <!--todo: for shib-->
  <!--<beans:bean id="preauthAuthProvider"-->
              <!--class="org.springframework.security.providers.preauth.PreAuthenticatedAuthenticationProvider">-->
    <!--&lt;!&ndash;adds pre-auth-provider to namespace authentication-provider above&ndash;&gt;-->
    <!--<custom-authentication-provider />-->
    <!--<beans:property name="preAuthenticatedUserDetailsService">-->
      <!--<beans:bean id="userDetailsServiceWrapper"-->
                  <!--class="org.springframework.security.userdetails.UserDetailsByNameServiceWrapper">-->
        <!--<beans:property name="userDetailsService" ref="userDetailsSvc"/>-->
      <!--</beans:bean>-->
    <!--</beans:property>-->
  <!--</beans:bean>-->

  <!--LDAP Setup-->
  <beans:bean id="repoMgr" class="org.duracloud.ldap.impl.DuracloudRepoMgrImpl"/>

  <beans:bean id="ldap" class="org.duracloud.ldap.impl.LdapImpl">
    <beans:constructor-arg ref="repoMgr"/>
  </beans:bean>

  <beans:bean id="ldapCache" class="org.duracloud.ldap.impl.LdapCachingImpl">
      <beans:constructor-arg ref="ldap"/>
    </beans:bean>

  <beans:bean id="userDetailsSvc" class="org.duracloud.security.impl.UserDetailsServiceLdapImpl">
    <beans:constructor-arg ref="ldapCache"/>
  </beans:bean>


  <beans:bean id="passwordEncoder"
    class="org.springframework.security.providers.encoding.ShaPasswordEncoder" >
   <beans:constructor-arg value="256"/>
  </beans:bean>

  <!-- AOP to log(in/out) ContentStoreMgr and ServicesMgr -->
  <beans:bean id="securityContextUtil" class="org.duracloud.security.context.SecurityContextUtil"/>

  <beans:bean id="securityAdvice" class="org.duracloud.duradmin.security.SecurityAdvice">
    <beans:constructor-arg ref="securityContextUtil"/>
  </beans:bean>

  <beans:bean id="securityAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    <beans:property name="advice" ref="securityAdvice"/>
    <beans:property name="pattern" value=".*Manager.*"/>
  </beans:bean>

  <!--
     AOP Proxy Creation Over ContentStoreMgr and ServicesMgr.
     Note: Would use spring...DefaultAdvisorAutoProxyCreator, but default constructor required.
   -->
  <beans:bean id="contentStoreManager" class="org.springframework.aop.framework.ProxyFactoryBean">
    <beans:property name="target" ref="contentStoreManagerTarget"/>
    <beans:property name="interceptorNames" value="securityAdvisor"/>
  </beans:bean>

  <beans:bean id="servicesManager" class="org.springframework.aop.framework.ProxyFactoryBean">
    <beans:property name="target" ref="servicesManagerTarget"/>
    <beans:property name="interceptorNames" value="securityAdvisor"/>
  </beans:bean>

</beans:beans>