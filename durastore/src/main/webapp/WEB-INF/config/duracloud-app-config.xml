<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

  <context:property-placeholder location="file:///${duracloud.properties.path}" />
  <context:annotation-config/>
  <context:component-scan base-package="org.duracloud" />
  <!-- FIXME this line seems to be necessary because without it, the JpaManifestStore is being initialized with the non-existent 
       default "transactionManager" bean. The problem has to do with the fact that there are overlapping configs: 
       the above annotation-config tag is necessary to ensure that MillJpaRepoConfig gets called, which in turn
       references an xml spring config which defines the  millRepoTransactionManager.  This obviously needs to be fixed. 
       But at least this workaround is working for the time being.  We'll need to look at how the database properties are getting
       injected (now via a property file - see above) as well so the fix to this issue will probably need to address both issues.
       -->
  <tx:annotation-driven transaction-manager="millRepoTransactionManager"/>
  <!--
    Imports the configurations of the different infrastructure systems
    of the application
  -->
  
  <import resource="restapi-config.xml" />
  <import resource="aop-config.xml" />
  <import resource="security-config.xml" />
  

</beans>
